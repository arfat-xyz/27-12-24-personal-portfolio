generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum BlogStatus {
  Draft
  Publish
}

enum ProjectStatus {
  Draft
  Publish
}

model Blog {
  id              String                 @id @default(cuid()) @map("_id")
  title           String
  slug            String                 @unique
  images          String[] // Array of strings
  description     String
  status          BlogStatus?            @default(Draft)
  comments        Comment[]              @relation("BlogComments")
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  blogTagId       String?
  tags            String[]
  BlogTagRelation BlogCategoryRelation[] @relation("Blog")

  @@map("blogs") // Matches the MongoDB collection name
}

// model BlogCategory {
//   id    String   @id @default(cuid()) @map("_id")
//   name  String   @unique
//   blogs Blog[]   @relation("BlogCategories")
//   createdAt DateTime @default(now())
// }

model BlogCategoryRelation {
  id             String       @id @default(cuid()) @map("_id")
  blogId         String
  blogCategoryId String
  blog           Blog         @relation("Blog", fields: [blogId], references: [id], onDelete: Cascade)
  blogCategory   BlogCategory @relation("BlogTag", fields: [blogCategoryId], references: [id], onDelete: Cascade)

  @@unique([blogId, blogCategoryId])
}

model BlogCategory {
  id        String   @id @default(cuid()) @map("_id")
  name      String   @unique
  createdAt DateTime @default(now())

  BlogCategoryRelation BlogCategoryRelation[] @relation("BlogTag")
}

model Comment {
  id        String   @id @default(cuid()) @map("_id")
  content   String
  blog      Blog     @relation("BlogComments", fields: [blogId], references: [id])
  blogId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id              String        @id @default(cuid()) @map("_id")
  slug            String
  title           String
  images          String[] // Array of strings
  description     String
  client          String?
  livePreview     String?
  projectCategory String[]
  tags            String[]
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @default(now()) @updatedAt @map("updated_at")
  status          ProjectStatus

  ProjectCategoryRelation ProjectCategoryRelation[] @relation("Project")
}

model Photo {
  id        String   @id @default(cuid()) @map("_id")
  slug      String
  title     String
  images    String[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
}

model ProjectCategory {
  id        String   @id @default(cuid()) @map("_id")
  name      String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  ProjectCategoryRelation ProjectCategoryRelation[] @relation("ProjectCategory")
}

model ProjectCategoryRelation {
  id                String          @id @default(cuid()) @map("_id")
  projectId         String
  projectCategoryId String
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @default(now()) @updatedAt @map("updated_at")
  project           Project         @relation("Project", fields: [projectId], references: [id], onDelete: Cascade)
  projectCategory   ProjectCategory @relation("ProjectCategory", fields: [projectCategoryId], references: [id], onDelete: Cascade)

  @@unique([projectId, projectCategoryId])
}

enum Role {
  ADMIN
  USER

  @@map("Role")
}

model User {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?         @unique
  hashedPassword String?
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  role           Role            @default(USER)
  // Optional for WebAuthn support
  Authenticator  Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}
